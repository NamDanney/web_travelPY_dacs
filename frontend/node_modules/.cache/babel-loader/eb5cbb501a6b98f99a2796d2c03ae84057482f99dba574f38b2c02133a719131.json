{"ast":null,"code":"var _jsxFileName = \"D:\\\\WEB_TRAVEL\\\\my-app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const storedUser = localStorage.getItem('user');\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (storedUser && token) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = userData => {\n    setUser({\n      id: userData.id,\n      username: userData.username,\n      email: userData.email,\n      fullName: userData.fullName,\n      phone: userData.phone,\n      role: userData.role\n    });\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Uq7KcTiOseX3k63CKoUNgtSkdNA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","storedUser","localStorage","getItem","token","sessionStorage","JSON","parse","login","userData","id","username","email","fullName","phone","role","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/WEB_TRAVEL/my-app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Check if user is logged in on mount\r\n        const storedUser = localStorage.getItem('user');\r\n        const token = localStorage.getItem('token') || sessionStorage.getItem('token');\r\n        \r\n        if (storedUser && token) {\r\n            setUser(JSON.parse(storedUser));\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    const login = (userData) => {\r\n        setUser({\r\n            id: userData.id,\r\n            username: userData.username,\r\n            email: userData.email,\r\n            fullName: userData.fullName,\r\n            phone: userData.phone,\r\n            role: userData.role \r\n        });\r\n        setIsAuthenticated(true);\r\n    };\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n        sessionStorage.removeItem('token');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7DE,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIE,cAAc,CAACF,OAAO,CAAC,OAAO,CAAC;IAE9E,IAAIF,UAAU,IAAIG,KAAK,EAAE;MACrBN,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC,CAAC;MAC/BD,kBAAkB,CAAC,IAAI,CAAC;IAC5B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAIC,QAAQ,IAAK;IACxBX,OAAO,CAAC;MACJY,EAAE,EAAED,QAAQ,CAACC,EAAE;MACfC,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;MAC3BC,KAAK,EAAEH,QAAQ,CAACG,KAAK;MACrBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;MAC3BC,KAAK,EAAEL,QAAQ,CAACK,KAAK;MACrBC,IAAI,EAAEN,QAAQ,CAACM;IACnB,CAAC,CAAC;IACFf,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMgB,MAAM,GAAGA,CAAA,KAAM;IACjBlB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;IACzBE,YAAY,CAACe,UAAU,CAAC,MAAM,CAAC;IAC/Bf,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChCZ,cAAc,CAACY,UAAU,CAAC,OAAO,CAAC;EACtC,CAAC;EAED,oBACIzB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,IAAI;MAAEE,eAAe;MAAES,KAAK;MAAEQ;IAAO,CAAE;IAAArB,QAAA,EACjEA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC3B,EAAA,CAxCWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AA0CzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGtC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACkC,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}